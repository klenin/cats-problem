package CATS::Formal::Generators::TestlibChecker;

use parent 'CATS::Formal::Generators::TestlibBase';

my $pe = '_constraint_result_';

sub init {
    my ($self) = @_;
    $self->SUPER::init();
    $self->{constraint_result} = $pe;
}

sub generate_top {
    my ($self, $fd, $k) = @_;
    my $child = $fd->find_child($k) || return;
    $self->{mode} = $k;
    $self->{params} = $child->{attributes};
    my $obj = $self->{objs}->{$k} = $self->generate_obj($child, '', 1);
    $self->{declarations} .= $obj->{declaration};
    my $seek_eof = $self->{params}->{strict} ? '$stream_name.seekEof();' : '';
    my $strict = $self->{params}->{strict} ? 'true' : 'false';
    $self->{functions} .= <<"END"
void read_$obj->{name}($obj->{type}& $obj->{name}, InStream& $self->{stream_name}, TResult $pe){
    $self->{stream_name}.strict = $strict;
$obj->{reader}
    $seek_eof
    $self->{stream_name}.readEof();
}

END
;
    return $obj;
}

sub generate_description {
    my ($self, $fd) = @_;
    die "expect ROOT object" if $fd->{type} != CATS::Formal::Constants::FD_TYPES->{ROOT};
    my $stream_name = $self->{stream_name};
    my @keys = qw(INPUT ANSWER OUTPUT);
    my %tresult = (
        INPUT => '_fail',
        ANSWER => '_fail',
        OUTPUT => '_pe',
    );
    my %stream = (
        INPUT => 'inf',
        ANSWER => 'ans',
        OUTPUT => 'ouf'
    );
    $self->{objs} = {};
    my $read_all ="void read_all(){\n";
    foreach my $k (@keys){
        my $obj = $self->generate_top($fd, $k) || next;
        $read_all .= "    read_$obj->{name}($obj->{name_for_expr}, $stream{$k}, $tresult{$k});\n";
    }
    $read_all .= "}\n";
    $self->{functions} .= $read_all;
}

sub constraint_function {
    my ($self, $constraint_code) = @_;
    return "_test_($constraint_code, $pe);\n";
}

sub pattern {
    my ($self) = @_;
    return <<"END"
/*
    THIS FILE GENERATED BY CATS-Formal
              DO NOT EDIT!!!
        EDIT DESCRIPTION INSTEAD
*/
#ifndef _GENERATED_PROGRAM_
#define _GENERATED_PROGRAM_
#include "testlib.h"
#define _test_(C, R) if (!(C)) quitf(R, "Condition failed: "" #C "" at line:%d", __LINE__)

using namespace std;
$self->{type_declarations}
$self->{type_definitions}
$self->{declarations}
$self->{functions}
#endif
END
}

1;
